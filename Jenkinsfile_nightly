#!groovy

properties([
        pipelineTriggers([cron('45 16 * * 1-5')]),
        parameters([
                // string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
                // string(name: 'ET_SYA_URL_TO_TEST', defaultValue: 'https://et-sya.aat.platform.hmcts.net/', description: 'The URL you want to run these tests against'),
                // string(name: 'ET_SYR_URL_TO_TEST', defaultValue: 'https://et-syr.aat.platform.hmcts.net/', description: 'The URL you want to run these tests against'),
                // string(name: 'IDAM_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net/testing-support/accounts', description: 'Idam url'),
                // string(name: 'MANAGE_ORG_URL', defaultValue: 'https://manage-org.aat.platform.hmcts.net', description: 'Manage org url'),
                // string(name: 'CCD_CALLBACKS_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net/cases', description: 'ccd url'),
                // string(name: 'ET_CASE_API_URL', defaultValue: 'http://et-sya-api-aat.service.core-compute-aat.internal/cases/initiate-case/', description: 'The Url for creating draft cases'),
                // string(name: 'ET_SUBMIT_DRAFT_CASE_URL', defaultValue: 'http://et-sya-api-aat.service.core-compute-aat.internal/cases/submit-case/', description: 'The Endpoint for submitting a darft case'),

            string(name: 'ENVIRONMENT', defaultValue: 'demo', description: 'Environment to test'),
            choice(name: 'ET_SYA_URL_TO_TEST', choices: ['https://et-sya.aat.platform.hmcts.net/', 'https://et-sya.demo.platform.hmcts.net/'], description: 'The URL you want to run these tests against'),
            choice(name: 'ET_SYR_URL_TO_TEST', choices: ['https://et-syr.aat.platform.hmcts.net/', 'https://et-syr.demo.platform.hmcts.net/'], description: 'The URL you want to run these tests against'),
            choice(name: 'IDAM_URL', choices: ['https://idam-api.aat.platform.hmcts.net/testing-support/accounts', 'https://idam-api.demo.platform.hmcts.net/testing-support/accounts'], description: 'Idam url'),
            choice(name: 'MANAGE_ORG_URL', choices: ['https://manage-org.aat.platform.hmcts.net', 'https://manage-org.demo.platform.hmcts.net'], description: 'Manage org url'),
            choice(name: 'CCD_CALLBACKS_URL', choices: ['https://manage-case.aat.platform.hmcts.net/cases', 'https://manage-case.demo.platform.hmcts.net/cases'], description: 'ccd url'),
            choice(name: 'ET_CASE_API_URL', choices: ['http://et-sya-api-aat.service.core-compute-aat.internal/cases/initiate-case/', 'http://et-sya-api-demo.service.core-compute-demo.internal/cases/initiate-case/'], description: 'The Url for creating draft cases'),
            choice(name: 'ET_SUBMIT_DRAFT_CASE_URL', choices: ['http://et-sya-api-aat.service.core-compute-aat.internal/cases/submit-case/', 'http://et-sya-api-demo.service.core-compute-demo.internal/cases/submit-case/'], description: 'The Endpoint for submitting a darft case'),
        ])
])

@Library("Infrastructure")

def product = "et"
def component = "frontend"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def inTestTrue = [
        'et-${env}': [
                secret('true', 'IN_TEST')
        ]
]

def inTestFalse = [
        'et-${env}': [
                secret('', 'IN_TEST')
        ]
]


def secrets = [
        'et-${env}': [
                secret('et-citizen-4-username', 'TEST_CASE_USERNAME'),
                secret('et-claimant-password', 'TEST_CASE_PASSWORD'),
                secret('idam-account-url', 'IDAM_ACCOUNT_URL'),
                secret('api-key', 'API_KEY'),
        ],
        'et-cos-${env}': [
                secret('et-caseworker-5-username', 'ET_CASEWORKER_USER_NAME'),
                secret('et-caseworker-5-password', 'ET_CASEWORKER_PASSWORD'),
                secret('et-legalrep-user-name', 'ET_LEGALREP_USER_NAME'),
                secret('et-legalrep-password', 'ET_LEGALREP_PASSWORD'),
                secret('et-wa-legal-ops-user-name', 'ET_LEGAL_OPS_USER_NAME'),
                secret('et-wa-legal-ops-password', 'ET_LEGAL_OPS_PASSWORD'),
                secret('et-ctsc-admin-user-name', 'ET_CTSC_ADMIN_USER_NAME'),
                secret('et-ctsc-admin-password', 'ET_CTSC_ADMIN_PASSWORD'),
                secret('et-hearing-judge-user-name-scotland', 'ET_HEARING_JUDGE_USER_NAME_SCOT'),
                secret('et-hearing-judge-user-name-eng', 'ET_HEARING_JUDGE_USER_NAME_ENG'),
                secret('et-hearing-admin-user-name-eng', 'ET_HEARING_ADMIN_USER_NAME_ENG'),
                secret('et-hearing-admin-user-name-scot', 'ET_HEARING_ADMIN_USER_NAME_SCOT'),
                secret('et-citizen-user-name', 'ET_CITIZEN_USER_NAME'),
                secret('et-citizen-password', 'ET_CITIZEN_PASSWORD'),
                secret('et-ccd-api-user-name','ET_CCD_API_USER_NAME'),
                secret('et-ccd-api-password','ET_CCD_API_PASSWORD'),
                secret('et-judge-user-name-eng','ET_JUDGE_USER_NAME_ENG'),
                secret('et-judge-user-eng-password','ET_JUDGE_USER_ENG_PASSWORD'),
                secret('et3-resp-user-name','ET3_REPSONDENT_USER_NAME'),
                secret('et3-resp-password','ET3_REPSONDENT_PASSWORD'),
                secret('et-resp-user-name','ET_REPSONDENT_USER_NAME'),
                secret('et-resp-password','ET_REPSONDENT_PASSWORD'),
                secret('et-manage-org-username','ET_MANAGE_ORG_USERNAME'),
                secret('et-manage-org-password','ET_MANAGE_ORG_PASSWORD'),
        ],
        's2s-${env}':  [
                secret('microservicekey-ccd-gw', 'MICROSERVICE_CCD_GW')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline("nodejs", product, component) {
    // triggers {
    //     cron(env.BRANCH_NAME == 'master' ? 'H 8 * * 1-5' : '')
    // }
    loadVaultSecrets(secrets)
    enableFullFunctionalTest(int timeout=300)
    //enableCrossBrowserTest()
    //enableFortifyScan()
    //enableSecurityScan()

    env.TEST_URL = params.ET_SYA_URL_TO_TEST
    env.IDAM_URL = params.IDAM_URL
    env.TEST_MANAGE_CASE_URL = params.CCD_CALLBACK_URL
    env.ET_CASE_API_URL = params.ET_CASE_API_URL
    env.RUNNING_ENV = params.ENVIRONMENT

    before('fullFunctionalTest') {
        yarnBuilder.yarn('yarn-update')
        yarnBuilder.yarn('install-dependencies')
    }


    afterAlways('fullFunctionalTest') {
         stage('Accessibility tests') {
            try {
                yarnBuilder.yarn('test:accessibility')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'ET Accessibility Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
        stage('Functional UI tests chromium') {
            try {
                yarnBuilder.yarn('test:functional-chromium')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'UITestChromiumReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
        stage('Functional UI tests firefox') {
            try {
                yarnBuilder.yarn('test:functional-firefox')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'UITestFirefoxReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
        stage('Functional UI tests webkit ') {
            try {
                yarnBuilder.yarn('test:functional-webkit')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'UITestWebkitReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
    }
}



